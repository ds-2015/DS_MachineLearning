min_dist = 10000000000
for(j in 1:10) {
ctr<-grn[j,]
dist <- (pnt-ctr)^2
if (dist<min_dist) {
min_dist = dist
gldc[i]<-j
}
}
i=1
min_dist = 10000000000
for(j in 1:10) {
ctr<-grn[j,]
dist <- (pnt-ctr)^2
if (dist<min_dist) {
min_dist = dist
gldc[i]<-j
}
}
min_dist
min_dist = 10000000000
min_dist
pnt<-gld[i,]
min_dist = 10000000000
for(j in 1:10) {
ctr<-grn[j,]
dist <- (pnt-ctr)^2
if (dist < min_dist) {
min_dist <- dist
gldc[i]<-j
}
}
min_dist
dist
pnt
grn
ctr
dist <- (pnt-ctr)^2
dist
(pnt-ctr)^2
pnt
ctr
dist <- (pnt-ctr)
dist <- dist*dist
dist
dotproduct(dist)
dist%*%dist
sqrt(dist%*%dist)
dist <- (pnt-ctr)
sqrt(dist%*%dist)
pnt
ctr
sqrt(27*27+125*125)
pnt<-gld[i,]
min_dist = 10000000000
for(j in 1:10) {
ctr<-grn[j,]
dist <- (pnt-ctr)
dist <- dist%*%dist
if (dist < min_dist) {
min_dist <- dist
gldc[i]<-j
}
}
gldc
for (i in 1:10) {
pnt<-gld[i,]
min_dist = 10000000000
for(j in 1:10) {
ctr<-grn[j,]
dist <- (pnt-ctr)
dist <- dist%*%dist
if (dist < min_dist) {
min_dist <- dist
gldc[i]<-j
}
}
}
gldc
sqrt(40*40+15*15)
sqrt(21*21+35*35)
ctr<-grn[1,]
pnt<-gld[2,]
dist<-ctr-pnt
dist%*%dist
ctr<-grn[2,]
dist<-ctr-pnt
dist%*%dist
gldc
j=1
ind<-gldc==j
ind
pnts<-sum(gld[ind,])
gld
pnts
gld[ind,]
rowsum(gld[ind,])
rowSums(gld[ind,])
colSums(gld[ind,])
ctr+colSums(gld[ind,])
ctr
sum(ind)
j=1
ctr<-grn[j,]
ind<-gldc==j
pnts<-colSums(gld[ind,])
nctr<-(ctr+pnts)/(sum(ind)+1)
nctr
gldc
for (j in 1:10) {
ctr<-grn[j,]
ind<-gldc==j
pnts<-colSums(gld[ind,])
nctr<-(ctr+pnts)/(sum(ind)+1)
j
nctr
}
ind
gld[ind,]
colSums(gld[ind,])
for (j in 1:10) {
ctr<-grn[j,]
ind<-gldc==j
n <- sum(ind)
nctr <- ctr
if (n == 1) nctr <- (ctr + gld[ind,])/2
if (n >= 2) {
pnts<-colSums(gld[ind,])
nctr<-(ctr+pnts)/(sum(ind)+1)
}
j
nctr
}
nctr<-grn
for (j in 1:10) {
ctr<-grn[j,]
ind<-gldc==j
n <- sum(ind)
if (n == 1) nctr[j,] <- (ctr + gld[ind,])/2
if (n >= 2) {
pnts<-colSums(gld[ind,])
nctr[j,]<-(ctr+pnts)/(sum(ind)+1)
}
}
grn
nctr
sqrt(49+25)
sqrt(25+81)
sqrt(100+16)
quit()
library(datasets); data(swiss);
require(stats)
require(graphics)
q()
data(mtcars)
head(mtcars)
dim(mtcars)
?mtcars
pairs(mtcars, panel=panel.smooth, main="Mtcars data")
require(graphics)
?pairs()
require(graphics)
pairs(mtcars, panel=panel.smooth, main="Mtcars data")
pairs(swiss, panel=panel.smooth, main="swiss data")
pairs(mtcars, panel=panel.smooth, main="Mtcars data", col=3+(mtcars$am > 0))
pairs(mtcars, panel=panel.smooth, main="Mtcars data", col=3)
pairs(mtcars, panel=panel.smooth, main="Mtcars data", col=3+(mtcars$am > 0))
pairs(mtcars, panel=panel.smooth, main="Mtcars data", col=3)
pairs(mtcars, panel=panel.smooth, main="Mtcars data", col=3+(mtcars$am > 0))
lm(mpg ~ am, mtcars)
summary(lm(mpg ~ am, mtcars))
lm1<-lm(mpg ~ wt, mtcars)
plot(mtcars$wt, mtcars$mpg, pch=19, col="blue")
lines(mtcars$wt,lm1$fitted,lwd=3,col="darkgrey")
plot(mtcars$wt, mtcars$mpg, pch=19)
points(mtcars$wt, mtcars$mpg, pch=19, col=((mtcars$am>0)*1+1))
lmBoth<-lm(mpg~wt*am,mtcars)
abline(c(lmBoth$coeff[1],lmBoth$coeff[2]),col="red",lwd=3)
abline(c(lmBoth$coeff[1],lmBoth$coeff[2]),col="black",lwd=3)
abline(c(lmBoth$coeff[1]+lmBoth$coeff[3], lmBoth$coeff[2]+lmBoth$coeff[4]),col="red",lwd=3)
summary(lmBoth)
summary(lmBoth<-lm(mpg~wt+am,mtcars))
summary(lmBoth<-lm(mpg ~ I(1*(am==0))+I(1*(am==1)),mtcars))
summary(lm(mpg ~ am,mtcars))
summary(lm(mpg ~ I(1*(am==1))+I(1*(am==0)),mtcars))
fit<-lm(mpg ~ ., mtcars)
vif(fit)
library(car)
vif(fit)
sqrt(vif(fit))
summary(mpg ~ ., mtcars)
summary(lm(mpg ~ ., mtcars))
head(mtcars)
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mgp ~ cyl + am,mtcars))[2],
coef(lm(mgp ~ cyl + disp + am,mtcars))[2],
coef(lm(mgp ~ cyl + disp + hp + am,mtcars))[2]
print(cf)
}
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mgp ~ cyl + am,mtcars))[2],
coef(lm(mgp ~ cyl + disp + am,mtcars))[2],
coef(lm(mgp ~ cyl + disp + hp + am,mtcars))[2])
print(cf)
}
makelms
makelms()
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ cyl + am,mtcars))[2],
coef(lm(mpg ~ cyl + disp + am,mtcars))[2],
coef(lm(mpg ~ cyl + disp + hp + am,mtcars))[2])
print(cf)
}
makelms()
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(mpg ~ am + cyl ,mtcars))[2],
coef(lm(mpg ~ am + cyl + disp,mtcars))[2],
coef(lm(mpg ~ am + cyl + disp + hp,mtcars))[2])
print(cf)
}
makelms()
fit <- lm(mpg ~ ., mtcars); plot(fit)
fit1<-lm(mpg ~ am, mtcars)
fit2<-lm(mpg ~ am+wt, mtcars)
fit3<-lm(mpg ~ am+wt+cyl, mtcars)
fit4<-lm(mpg ~ am+wt+cyl+disp, mtcars)
fit5<-lm(mpg ~ am+wt+cyl+disp+hp, mtcars)
fit6<-lm(mpg ~ am+wt+cyl+disp+hp+drat, mtcars)
fit7<-lm(mpg ~ am+wt+cyl+disp+hp+drat+qsec, mtcars)
fit8<-lm(mpg ~ am+wt+cyl+disp+hp+drat+qsec+vs, mtcars)
fit9<-lm(mpg ~ am+wt+cyl+disp+hp+drat+qsec+vs+gear, mtcars)
fit10<-lm(mpg ~ am+wt+cyl+disp+hp+drat+qsec+vs+gear+carb, mtcars)
anova(fit1,fit2,fit3,fit4,fit5,fit6,fit7,fit8,fit9,fit10)
summary(lm(mpg ~ wt + cyl + am, mtcars))
summary(lm(mpg ~ wt * cyl * am, mtcars))
empg<-resid(lm(mpg ~ cyl - 1))
empg<-resid(lm(mpg ~ cyl - 1, mtcars))
ewt<-resid(lm(wt ~ cyl - 1), mtcars)
ewt<-resid(lm(wt ~ cyl - 1), mtcars))
ewt<-resid(lm(wt ~ cyl - 1, mtcars))
eam<-resid(lm(am ~ cyl - 1, mtcars))
lm(empg ~ ewt + eam, mtcars)
lm(empg ~ ewt + eam)
lm(mpg ~ wt + am, mtcars)
lm(empg ~ ewt)
lm(mpg ~ wt, mtcars)
lm(mpg ~ wt + cyl, mtcars)
lm(mpg ~ wt + am, mtcars)
summary(lm(mpg ~ wt + am, mtcars))$coef
summary(lm(mpg ~ wt, mtcars))$coef
summary(lm(mpg ~ wt*am, mtcars))$coef
summary(lm(mpg ~ wt+cyl, mtcars))$coef
summary(lm(empg ~ ewt))$coef
summary(lm(mpg ~ ., mtcars))$coef
summary(lm(mpg ~ .-cyl, mtcars))$coef
summary(lm(mpg ~ .-cyl-vs, mtcars))$coef
summary(lm(mpg ~ .-cyl-vs-carb, mtcars))$coef
summary(lm(mpg ~ .-cyl-vs-carb-gear, mtcars))$coef
summary(lm(mpg ~ .-cyl-vs-carb-gear-drat, mtcars))$coef
summary(lm(mpg ~ .-cyl-vs-carb-gear-drat-disp, mtcars))$coef
summary(lm(mpg ~ .-cyl-vs-carb-gear-drat-disp-hp, mtcars))$coef
?mtcars
summary(lm(mpg ~ wt, mtcars))$coef
summary(lm(mpg ~ cyl, mtcars))$coef
summary(lm(mpg ~ wt+cyl, mtcars))$coef
summary(lm(mpg ~ cyl+wt, mtcars))$coef
head(mtcars)
qmpg<-resid(lm(mpg ~ qsec - 1, mtcars))
qwt<-resid(lm(mpg ~ wt - 1, mtcars))
qam<-resid(lm(mpg ~ am - 1, mtcars))
summary(lm(qmpg ~ qwt))$coef
summary(lm(mpg ~ wt + qsec, mtcars))$coef
lmw<-lm(mpg ~ wt + am, mtcars)
summary(lmw)
lma<-lm(mpg ~ am, mtcars)
summary(lma)
summary(lmw)$coef
summary(lma)$coef
lmwi<-lm(mpg ~ wt * am, mtcars)
summary(lmwi)
lmq<-lm(mpg ~ wt + qsec + am, mtcars)
summary(lmq)
fit1<-lm(mpg ~ wt + cyl,mtcars)
fit2<-lm(mpg ~ wt * cyl, mtcars)
anova(fit1,fit2)
fit1<-lm(mpg ~ cyl+wt,mtcars)
fit2<-lm(mpg ~  cyl*wt, mtcars)
anova(fit1,fit2)
anova(fit2,fit1)
fit2<-lm(mpg ~  factor(cyl)*wt, mtcars)
fit1<-lm(mpg ~ factor(cyl)+wt,mtcars)
anova(fit2,fit1)
lma<-lm(mpg ~ factor(am), mtcars)
summary(lma)$coef
lmw<-lm(mpg ~ wt + factor(am), mtcars)
summary(lmw)$coef
lmwi<-lm(mpg ~ wt * factor(am), mtcars)
summary(lmwi)$coef
anova(lmw,lmwi)
lmq<-lm(mpg ~ wt + qsec + factor(am))
lmq<-lm(mpg ~ wt + qsec + factor(am),mtcars)
summary(lmq)$coef
lmqi<-lm(mpg ~ wt * qsec * factor(am),mtcars)
summary(lmqi)$coef
lmqi<-lm(mpg ~ wt * qsec * am,mtcars)
summary(lmqi)$coef
anova(lmq,lmqi)
anova(lwi,lqi)
anova(lmwi,lmqi)
par(mfrow=c(2,2))
plot(lmw)
plot(lmwi)
plot(lmw)
plot(lmq)
plot(lmq)
plot(lmw)
lmall<-lm(mpg ~ ., mtcars)
plot(lmall)
anova(lmall, lmw)
anova(lmw, lmall)
anova(lmq, lmall)
summary(lmw)$coef
summary(lmwi)$coef
anova(lmw,lmwi)
summary(lma)$coef
summary(lmw)
summary(lmwi)
summary(lma)
?mtcars
summary(lmw)
summary(lmwi)
summary(lma)
summary(lmw)
plot(mtcars$wt, mtcars$mpg, pch=19)
points(mtcars$wt, mtcars$mpg, pch=19, col=((mtcars$am>0)*1+1))
abline(c(lmw$coeff[1],lmw$coeff[2]),col="darkgrey",lwd=3)
abline(c(lmw$coeff[1],lmw$coeff[2]),lwd=3)
abline(c(lmw$coeff[1]+lmw$coef[3],lmw$coeff[2]),lwd=3)
abline(c(lmw$coeff[1],lmw$coeff[2]),lwd=3)
abline(c(lmw$coeff[1]+lmw$coef[3],lmw$coeff[2]),col="red",lwd=3)
abline(c(lmw$coeff[1],lmw$coeff[2]),lwd=1)
abline(c(lmw$coeff[1]+lmw$coef[3],lmw$coeff[2]),col="red",lwd=1)
abline(c(lmw$coeff[1]+lmw$coef[3],lmw$coeff[2]),col="darkgrey",lwd=1)
summary(lmwi)
-3.7859-5.2984
require(GGally)
library(ggplot2)
library(GGally)
install.packages("GGally")
library(GGally)
ggpairs(mtcars,lower=list(coninuous="smooth"),params=c(method="loess"))
summary(lmall)
summary(lmq)
anova(lma,lmw,lmq,lmall)
vif(lmall)
sqrt(vif(lmall))
summary(lmw)
summary(lmq)
plot(lma)
plot(lmw)
par(mfrow=c(2,2))
plot(lma)
par(mfrow=c(2,2))
plot(lmw)
par(mfrow=c(2,2))
plot(lmwi)
par(mfrow=c(2,2))
plot(lma)
par(mfrow=c(2,2))
plot(lmq)
par(mfrow=c(2,2))
plot(lmall)
resid(lma)
variance(lma)
lma$variance
?deviance()
sqrt(sum(resid(lmwi)^2))
sqrt(sum(resid(lmq)^2))
sqrt(sum(resid(lmw)^2))
sqrt(sum(resid(lmall)^2))
sqrt(sum(resid(lma)^2))
summary(lmwi)
summary(lmw)
summary(lmq)
summary(lmall)
rstandard(lmwi)
sqrt(sum(resid(lmq)^2))
deviance(lmq)
sqrt(deviance(lmq))
sqrt(deviance(lmwi))
sqrt(sum(resid(lmwi)^2))
round(dfbetas(lmwi)[,2],3)
max(dfbetas(lmwi)[,2])
max(dfbetas(lmwi)[,2] > 0.5)
dfbetas(lmwi)[,2] > 0.5
dfbetas(lmwi)
head(order(dfbetas(lmwi)))
dfbetas(lmwi)[17,]
db<-dfbetas(lmwi)
db(head(order(db)))
db[head(order(db)),]
head(order(db))
db[head(order(db))]
db[order(db),]
?order()
db[order(db[,2]),]
db[order(db[,2]),]
db[order(db[,2],decreasing=TRUE),]
hat<-hatvalues(lmwi)
round(hat[order(hat,decreasing=TRUE)],3)
round(head(hat[order(hat,decreasing=TRUE)],3))
head(round(hat[order(hat,decreasing=TRUE)],3))
head(round(db[order(db[,2],decreasing=TRUE),],3))
sa<-sum(resid(lm(mpg ~ am, mtcars))^2)
sw<-sum(resid(lm(mpg ~ wt + am, mtcars))^2)
swi<-sum(resid(lm(mpg ~ wt * am, mtcars))^2)
sq<-sum(resid(lm(mpg ~ wt + qsec + am, mtcars))^2)
sall<-sum(resid(lm(mpg ~ ., mtcars))^2)
c(sa, sw, swi, sq, sall)
sa<-sum(resid(lm(mpg ~ am, mtcars))^2)
sw<-sum(resid(lm(mpg ~ wt + am, mtcars))^2)
swi<-sum(resid(lm(mpg ~ wt * am, mtcars))^2)
sq<-sum(resid(lm(mpg ~ wt + qsec + am, mtcars))^2)
sall<-sum(resid(lm(mpg ~ ., mtcars))^2)
sqrt(c(sa, sw, swi, sq, sall))
c(summary(lm(mpg ~ am, mtcars))$sigma,
summary(lm(mpg ~ wt + am, mtcars))$sigma,
summary(lm(mpg ~ wt * am, mtcars))$sigma,
summary(lm(mpg ~ wt + qsec + am, mtcars))$sigma,
summary(lm(mpg ~ ., mtcars))$sigma)
summary(lma)$rsqaured
summary(lma)$rsqaure
summary(lma)$r.sqaured
summary(lma)$r.squared
c(summary(lma)$r.squared, summary(lmw)$r.squared, summary(lmwi)$r.squared),
summary(lmq)$r.squared, summary(lmall)$r.squared)
c(summary(lma)$r.squared, summary(lmw)$r.squared, summary(lmwi)$r.squared,
summary(lmq)$r.squared, summary(lmall)$r.squared)
abline(c(lmwi$coeff[1],lmwi$coeff[2]),lwd=3)
plot(mtcars$wt, mtcars$mpg, pch=19)
points(mtcars$wt, mtcars$mpg, pch=19, col=((mtcars$am>0)*1+1))
abline(c(lmwi$coeff[1],lmwi$coeff[2]),lwd=3)
abline(c(lmwi$coeff[1]+lmwi$coeff[3], lmwi$coeff[2]+lmwi$coeff[4]),col="red",lwd=3)
?vif
library(car)
quit()
getwd()
setwd("C:/_ds/07ML/PA")
pmltrain_orig<-read.csv("pml-training.csv")
pmltest_orig<-read.csv("pml-testing.csv")
natest<-colSums(is.na(pmltesting)) > 0
natrain<-colSums(is.na(pmltrain_orig)) > 0
natest<-colSums(is.na(pmltest_orig)) > 0
training<-pmltrain_orig[,!natest]
testing<-pmltest_orig[,!natest]
training<-training[,8:60]
testing<-testing[,8:60]
inCV = createDataPartition(training$classe, p = 0.1)[[1]]
cv0<-training[inCV,]
pmltrain0<-training[-inCV,]
pmlcv0<-cv0
inTrain<-createDataPartition(pmltrain0$classe, p=0.1)[[1]]
pmltrain1<-pmltrain0[inTrain,]
library(caret)
inCV = createDataPartition(training$classe, p = 0.1)[[1]]
cv0<-training[inCV,]
pmltrain0<-training[-inCV,]
pmlcv0<-cv0
inTrain<-createDataPartition(pmltrain0$classe, p=0.1)[[1]]
pmltrain1<-pmltrain0[inTrain,]
rfmod1<-train(classe~., data=pmltrain1, method="rf",
trControl=trainControl(method="cv",number=5),
importance=TRUE,prox=TRUE)
print(rfmodel)
print(rfmod1)
confusionMatrix(pmlcv0$classe, predict(rfmod1,pmlcv0[,-53]))
inTrain = createDataPartition(training$classe, p = 0.2)[[1]]
pmltrain2<-pmltrain0[inTrain,]
inTrain = createDataPartition(training$classe, p = 0.5)[[1]]
pmltrain5<-pmltrain0[inTrain,]
pmltrain5<-training[inTrain,]
inTrain = createDataPartition(training$classe, p = 0.2)[[1]]
pmltrain2<-training[inTrain,]
19622/5
19622/2
rfmod5<-train(classe~., data=pmltrain5, method="rf",
trControl=trainControl(method="cv",number=5),
importance=TRUE,prox=TRUE)
inTrain6 = createDataPartition(training$classe, p = 0.6)[[1]]
pmltrain6<-training[inTrain6,]
set.seed(12345)
pmltrain6<-training[inTrain6,]
inTrain6 = createDataPartition(training$classe, p = 0.6)[[1]]
pmltrain6<-training[inTrain6,]
rfmod6<-train(classe~., data=pmltrain6, method="rf",
trControl=trainControl(method="cv",number=5),
importance=TRUE,prox=TRUE)
print(rfmod6)
inTrain5 = createDataPartition(training$classe, p = 0.5)[[1]]
pmltrain5<-training[inTrain5,]
rfmod5b<-train(classe~., data=pmltrain5, method="rf",
trControl=trainControl(method="cv",number=5),
importance=TRUE,prox=TRUE)
confusionMatrix(pmlcv0$classe, predict(rfmod5,pmlcv0[,-53]))
head(testing)
ans<-predict(rfmod5,testing[,-53])
ans
quit()
